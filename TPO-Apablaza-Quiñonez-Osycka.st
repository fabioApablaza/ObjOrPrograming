Object subclass: #Civilizacion	instanceVariableNames: 'nombre colRegiones colRegPorConquistar dinero'	classVariableNames: ''	poolDictionaries: ''	category: 'TPO-Apablaza-Quiñonez-Osycka'!!Civilizacion commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	colRegPorConquistar:		<Object>	colRegiones:		<Object>	dinero:		<Object>	nombre:		<Object>    Implementation Points!!Civilizacion methodsFor: 'Inicializador' stamp: 'Fabio 6/24/2018 19:07'!inicializarCivilizacion:unNombre dinero:unDineronombre:=unNombre.dinero:=unDinero.colRegPorConquistar:=OrderedCollection new.colRegiones :=OrderedCollection new.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Civilizacion class	instanceVariableNames: ''!!Civilizacion class methodsFor: 'Constructor' stamp: 'Fabio 6/24/2018 19:05'!crearCivilizacion:unNombre dinero:unDinero|unaCivilizacion|unaCivilizacion:=self new.^unaCivilizacion ! !Object subclass: #Edificio	instanceVariableNames: 'coste tiempo cuentaTiempo vida contadorTurno'	classVariableNames: ''	poolDictionaries: ''	category: 'TPO-Apablaza-Quiñonez-Osycka'!!Edificio commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	contadorTurno:		<Object>	coste:		<Object>	cuentaTiempo:		<Object>	poder:		<Object>	tiempo:		<Object>	vida:		<Object>    Implementation Points!!Edificio methodsFor: 'Metodos' stamp: 'Fabio 6/25/2018 14:23'!verifDinero:dineroCivilizacion^(dineroCivilizacion = coste)! !!Edificio methodsFor: 'Metodos' stamp: 'Fabio 6/24/2018 18:38'!inicializarEdificio: unCoste tiempo:unTiempo cuentaTiempo:unCuenta vida:unaVida  contadorTurno:unContTurnocoste:=unCoste.tiempo:=unTiempo.cuentaTiempo:=unCuenta.vida:=unaVida.contadorTurno:=unContTurno.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Edificio class	instanceVariableNames: ''!!Edificio class methodsFor: 'Constructor' stamp: 'Fabio 6/24/2018 18:39'!crearEdificio:unCoste tiempo:unTiempo cuentaTiempo:unCuentaTiempo vida:unaVida contadorTurno:unContadorTurno|unEdificio|unEdificio:= self new.unEdificio inicializarEdificio: unCoste tiempo:unTiempo  cuentaTiempo:unCuentaTiempo  vida:unaVida  contadorTurno: unContadorTurno.^unEdificio ! !Edificio subclass: #Aeropuerto	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TPO-Apablaza-Quiñonez-Osycka'!!Aeropuerto commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!!Aeropuerto methodsFor: 'Metodos' stamp: 'Fabio 6/8/2018 14:50'!verifTiempo|construccion|construccion:=false.(cuentaTiempo==tiempo)ifTrue:[construccion:=true].^construccion. ! !!Aeropuerto methodsFor: 'Metodos' stamp: 'Fabio 6/8/2018 14:46'!verifDinero: dineroCivilizacion^dineroCivilizacion==coste.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Aeropuerto class	instanceVariableNames: ''!!Aeropuerto class methodsFor: 'Constructor' stamp: 'Fabio 6/24/2018 18:43'!crearAeropuerto|unAeropuerto|unAeropuerto:= self crearEdificio: 30 tiempo:5  cuentaTiempo:0  vida:5  contadorTurno:0. ^unAeropuerto ! !Edificio subclass: #Casa	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TPO-Apablaza-Quiñonez-Osycka'!!Casa commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!!Casa methodsFor: 'Metodos' stamp: 'Fabio 6/11/2018 17:02'!verificarCreacion|civil|civil:=nil.(contadorTurno==tiempo)ifTrue:[civil:=Civil crearCivil.	contadorTurno:=0]ifFalse:[contadorTurno:=contadorTurno+1].^civil.! !!Casa methodsFor: 'Metodos' stamp: 'Fabio 6/8/2018 14:50'!verifTiempo|construccion|construccion:=false.(cuentaTiempo==tiempo)ifTrue:[construccion:=true].^construccion. ! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Casa class	instanceVariableNames: ''!!Casa class methodsFor: 'Constructor' stamp: 'Fabio 6/24/2018 19:25'!crearCasa|unaCasa|unaCasa:=self crearEdificio: 3 tiempo:2  cuentaTiempo:0  vida:2  contadorTurno:0. ^unaCasa.! !Edificio subclass: #EscuelaM	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TPO-Apablaza-Quiñonez-Osycka'!!EscuelaM commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!!EscuelaM methodsFor: 'Metodos' stamp: 'Fabio 6/8/2018 14:51'!verifTiempo|construccion|construccion:=false.(cuentaTiempo==tiempo)ifTrue:[construccion:=true].^construccion. ! !!EscuelaM methodsFor: 'Metodos' stamp: 'Fabio 6/8/2018 14:47'!verifDinero: dineroCivilizacion^dineroCivilizacion==coste.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!EscuelaM class	instanceVariableNames: ''!!EscuelaM class methodsFor: 'Constructor' stamp: 'Fabio 6/24/2018 18:47'!crearEscuelaM|unaEscuelaM|unaEscuelaM:= self crearEdificio:10  tiempo:3  cuentaTiempo:0  vida:4  contadorTurno:0. ^unaEscuelaM! !Edificio subclass: #Fabrica	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TPO-Apablaza-Quiñonez-Osycka'!!Fabrica commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!!Fabrica methodsFor: 'Metodos' stamp: 'Fabio 6/8/2018 14:51'!verifTiempo|construccion|construccion:=false.(cuentaTiempo==tiempo)ifTrue:[construccion:=true].^construccion. ! !!Fabrica methodsFor: 'Metodos' stamp: 'Fabio 6/8/2018 14:48'!verifDinero: dineroCivilizacion^dineroCivilizacion==coste.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Fabrica class	instanceVariableNames: ''!!Fabrica class methodsFor: 'Constructor' stamp: 'Fabio 6/24/2018 18:49'!crearFabrica|unaFabrica|unaFabrica:=self crearEdificio: 20 tiempo:4  cuentaTiempo:0  vida:4  contadorTurno:0.^unaFabrica ! !Edificio subclass: #FabricaM	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TPO-Apablaza-Quiñonez-Osycka'!!FabricaM commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!!FabricaM methodsFor: 'Metodos' stamp: 'Fabio 6/8/2018 14:51'!verifTiempo|construccion|construccion:=false.(cuentaTiempo==tiempo)ifTrue:[construccion:=true].^construccion. ! !!FabricaM methodsFor: 'Metodos' stamp: 'Fabio 6/8/2018 14:48'!verifDinero: dineroCivilizacion^dineroCivilizacion==coste.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!FabricaM class	instanceVariableNames: ''!!FabricaM class methodsFor: 'Constructor' stamp: 'Fabio 6/24/2018 18:51'!crearFabricaM|unaFabricaM|unaFabricaM:=self crearEdificio: 25 tiempo:5  cuentaTiempo:0  vida:5  contadorTurno:0.^unaFabricaM ! !Object subclass: #Juego	instanceVariableNames: 'colCivilizaciones colRegiones'	classVariableNames: ''	poolDictionaries: ''	category: 'TPO-Apablaza-Quiñonez-Osycka'!!Juego commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	colCivilizaciones:		<Object>	colRegiones:		<Object>    Implementation Points!Object subclass: #Region	instanceVariableNames: 'coordenada colRegionesLimitrofes colUnidades colEdificios'	classVariableNames: ''	poolDictionaries: ''	category: 'TPO-Apablaza-Quiñonez-Osycka'!!Region commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	colEdificios:		<Object>	colRegionesLimitrofes:		<Object>	colUnidades:		<Object>	coordenada:		<Object>    Implementation Points!!Region methodsFor: 'visualizadores' stamp: 'Fabio 6/25/2018 14:12'!getColUnidades^colUnidades.! !!Region methodsFor: 'Metodos' stamp: 'Fabio 6/25/2018 14:19'!agregarUnidad:unaUnidadcolUnidades add: unaUnidad.! !!Region methodsFor: 'Metodos' stamp: 'Fabio 6/25/2018 14:50'!construir:dineroCivilizacion construccion:tipoConstruccion|civil edificio|(tipoConstruccion='casa')ifTrue: [ (dineroCivilizacion >2)				ifTrue:[civil:=colUnidades detect:[:cadaUnidad| cadaUnidad correspondeConstruir]  .edificio:=civil crearCasa.]				ifFalse:[^'Dinero Insuficiente'].				^edificio 				].			(tipoConstruccion='fabrica')ifTrue: [ (dineroCivilizacion >19)				ifTrue:[civil:=colUnidades detect:[:cadaUnidad| cadaUnidad correspondeConstruir]  .edificio:=civil crearFabrica .]				ifFalse:[^'Dinero Insuficiente'].				^edificio 				].			 (tipoConstruccion='fabrica militar')ifTrue: [ (dineroCivilizacion >24)				ifTrue:[civil:=colUnidades detect:[:cadaUnidad| cadaUnidad correspondeConstruir]  .edificio:=civil crearFabricaM  .]				ifFalse:[^'Dinero Insuficiente'].				^edificio 				].			(tipoConstruccion='escuela militar')ifTrue: [ (dineroCivilizacion >9)				ifTrue:[civil:=colUnidades detect:[:cadaUnidad| cadaUnidad correspondeConstruir]  .edificio:=civil crearEscuelaMilitar  .]				ifFalse:[^'Dinero Insuficiente'].				^edificio 				].			(tipoConstruccion='aeropuerto')ifTrue: [ (dineroCivilizacion >29)				ifTrue:[civil:=colUnidades detect:[:cadaUnidad| cadaUnidad correspondeConstruir]  .edificio:=civil crearAeropuerto  .]				ifFalse:[^'Dinero Insuficiente'].				^edificio 				].								! !!Region methodsFor: 'inicializador' stamp: 'Fabio 6/24/2018 19:02'!inicializadorRegion:unaCoordenadacoordenada:=unaCoordenada.colRegionesLimitrofes:=OrderedCollection new.colEdificios :=OrderedCollection new.colUnidades :=OrderedCollection new.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Region class	instanceVariableNames: ''!!Region class methodsFor: 'Constructor' stamp: 'Fabio 6/24/2018 19:06'!crearRegion:unaCoordenada |unaRegion|unaRegion:=self new.unaRegion inicializadorRegion: unaCoordenada.^unaRegion ! !Object subclass: #Unidad	instanceVariableNames: 'coste tiempo vida ataque defensa desplazamiento despTemp'	classVariableNames: ''	poolDictionaries: ''	category: 'TPO-Apablaza-Quiñonez-Osycka'!!Unidad commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	ataque:		<Object>	coste:		<Object>	defensa:		<Object>	despTemp:		<Object>	desplazamiento:		<Object>	tiempo:		<Object>	vida:		<Object>    Implementation Points!!Unidad methodsFor: 'Inicializador' stamp: 'Fabio 6/24/2018 20:04'!correspondeConstruir^false.! !!Unidad methodsFor: 'Inicializador' stamp: 'Fabio 6/24/2018 18:01'!inicializarUnidad: unCoste tiempo:unTiempo vida:unaVida ataque:unAtaque defensa:unaDefensa desplazamiento:unDesp desplazamientoTemp:unDespTempcoste:=unCoste.tiempo:=unTiempo.vida:=unaVida.ataque:=unAtaque.defensa:=unaDefensa.desplazamiento:=unDesp.despTemp:=unDespTemp.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Unidad class	instanceVariableNames: ''!!Unidad class methodsFor: 'Constructor' stamp: 'Fabio 6/24/2018 18:04'!crearUnidad:unCoste tiempo:unTiempo vida:unaVida ataque:unAtaque defensa:unaDefensa desplazamiento:unDesplazamiento despTemp:unDespTemp|unidad|unidad:= self new.unidad inicializarUnidad: unCoste tiempo:unTiempo  vida:unaVida  ataque:unAtaque  defensa:unaDefensa  desplazamiento: unDesplazamiento  desplazamientoTemp:unDespTemp. ^unidad! !Unidad subclass: #Civil	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TPO-Apablaza-Quiñonez-Osycka'!!Civil commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!!Civil methodsFor: 'Metodos' stamp: 'Fabio 6/24/2018 19:26'!crearCasa|unaCasa|unaCasa := Casa crearCasa.^unaCasa! !!Civil methodsFor: 'Metodos' stamp: 'Fabio 6/24/2018 19:37'!crearFabrica|unaFabrica|unaFabrica := Fabrica crearFabrica.^unaFabrica! !!Civil methodsFor: 'Metodos' stamp: 'Fabio 6/25/2018 14:48'!crearAeropuerto|unaAeropuerto|unaAeropuerto := Aeropuerto crearAeropuerto. ^unaAeropuerto.! !!Civil methodsFor: 'Metodos' stamp: 'Fabio 6/25/2018 14:45'!crearFabricaM|unaFabrica|unaFabrica := FabricaM crearFabricaM.^unaFabrica! !!Civil methodsFor: 'Metodos' stamp: 'Fabio 6/25/2018 14:47'!crearEscuelaMilitar|unaEscuelaM|unaEscuelaM  := EscuelaM crearEscuelaM .^unaEscuelaM.! !!Civil methodsFor: 'Metodos' stamp: 'Fabio 6/24/2018 20:04'!correspondeConstruir^true.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Civil class	instanceVariableNames: ''!!Civil class methodsFor: 'Constructor' stamp: 'Fabio 6/24/2018 18:06'!crearCivil|unCivil|unCivil:=self crearUnidad:0  tiempo:2  vida:1  ataque:0  defensa:1  desplazamiento:1  despTemp:1 .^unCivil.! !Unidad subclass: #Soldado	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TPO-Apablaza-Quiñonez-Osycka'!!Soldado commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Soldado class	instanceVariableNames: ''!!Soldado class methodsFor: 'Constructor' stamp: 'Fabio 6/24/2018 18:09'!crearSoldado|soldado|soldado:=self crearUnidad: 2 tiempo:3  vida:10  ataque:1  defensa:1  desplazamiento:1  despTemp:1.^soldado ! !Soldado subclass: #SoldadoPlus	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TPO-Apablaza-Quiñonez-Osycka'!!SoldadoPlus commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!SoldadoPlus class	instanceVariableNames: ''!!SoldadoPlus class methodsFor: 'Constructor' stamp: 'Fabio 6/24/2018 18:13'!crearSoldadoplus|soldadoplus|soldadoplus:= self crearUnidad: 3 tiempo:4  vida:15  ataque:2  defensa:1  desplazamiento:2  despTemp:2.^soldadoplus  ! !Unidad subclass: #Transporte	instanceVariableNames: 'transp'	classVariableNames: ''	poolDictionaries: ''	category: 'TPO-Apablaza-Quiñonez-Osycka'!!Transporte commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	transp:		<Object>    Implementation Points!!Transporte methodsFor: 'Modificadores' stamp: 'Fabio 6/24/2018 18:21'!setTransp:unTransptransp:=unTransp.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Transporte class	instanceVariableNames: ''!!Transporte class methodsFor: 'Constructor' stamp: 'Fabio 6/24/2018 18:23'!crearTransporte:unCoste tiempo:untiempo vida:unaVida ataque:unAtaque defensa:unaDefensa desplazamiento:unDesplazamiento despTemp:unDespTemp transp:unTransp |unTransporte|unTransporte :=self crearUnidad: unCoste tiempo:untiempo  vida:unaVida  ataque:unAtaque  defensa:unaDefensa  desplazamiento:unDesplazamiento  despTemp:unDespTemp.unTransporte setTransp: unTransp.^unTransporte  ! !Transporte subclass: #Bombardero	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TPO-Apablaza-Quiñonez-Osycka'!!Bombardero commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Bombardero class	instanceVariableNames: ''!!Bombardero class methodsFor: 'Constructor' stamp: 'Fabio 6/24/2018 18:25'!crearBombardero|unBombardero|unBombardero:= self crearTransporte:10  tiempo:8  vida:10  ataque:4  defensa:2  desplazamiento:4  despTemp:4  transp:6.^unBombardero  ! !Transporte subclass: #Camion	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TPO-Apablaza-Quiñonez-Osycka'!!Camion commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Camion class	instanceVariableNames: ''!!Camion class methodsFor: 'Constructor' stamp: 'Fabio 6/24/2018 18:27'!crearCamion|unCamion|unCamion:= self crearTransporte: 10 tiempo:8  vida:10  ataque:4  defensa:2  desplazamiento:4  despTemp:4  transp:6.^unCamion  ! !Transporte subclass: #Tanque	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TPO-Apablaza-Quiñonez-Osycka'!!Tanque commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Tanque class	instanceVariableNames: ''!!Tanque class methodsFor: 'Constructor' stamp: 'Fabio 6/24/2018 18:31'!crearTanque|unTanque|unTanque:=self crearTransporte: 8 tiempo:6  vida:25  ataque:4  defensa:3  desplazamiento:2  despTemp:2  transp:1.^unTanque ! !